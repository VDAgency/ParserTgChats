import logging
from telethon import events
from telethon import TelegramClient
from telethon.tl.types import User
from telethon.errors import FloodWaitError, SessionPasswordNeededError, PhoneMigrateError
from client_instance import client
from datetime import datetime, timedelta
import time
import os
import sys
import asyncio
import random
from dotenv import load_dotenv
from database import save_message, is_message_processed, get_last_parsed_date, get_all_tracked_chats, check_keywords_match, mark_message_as_processed
from webhook_processor import process_and_send_webhook
from group_sender import send_to_supergroup_topic


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
CHAT_IDS = [int(chat_id.strip()) for chat_id in os.getenv("CHAT_IDS", "").split(",")]
PHONE = os.getenv("PHONE")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
async def start_client():
    logger.info(f"{datetime.now()}: ‚úÖ We launch the Telethon client for the user bot. | –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telethon –¥–ª—è —é–∑–µ—Ä-–±–æ—Ç–∞.")
    try:
        await client.connect()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if not await client.is_user_authorized():
            await client.start(phone=PHONE)
        me = await client.get_me()
        logger.info(f"Authenticated as: {me.id} ({me.phone})")
        logger.info("‚úÖ Telethon client connected")
    except Exception as e:
        logger.info(f"{datetime.now()}: Error starting client: {str(e)}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
async def stop_client():
    await client.disconnect()
    logger.info(f"{datetime.now()}: üõë Telethon client disconnected")


async def send_test_message():
    me = await client.get_me()
    my_user_id = me.id
    await client.send_message(my_user_id, "Bot activated successfully! This is a test message. | –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    logger.info(f"{datetime.now()}: Test message sent to yourself. | –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")


async def get_entity_or_fail(entity_id):
    try:
        entity = await client.get_entity(entity_id)  # –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø–æ ID
        return entity
    except ValueError as e:
        raise Exception(f"Could not resolve entity {entity_id}: {str(e)}")


async def check_session():
    try:
        me = await client.get_me()
        if not me:
            raise Exception("Session is invalid, attempting to reconnect.")
        return True
    except Exception as e:
        logger.info(f"{datetime.now()}: Session check failed: {str(e)}")
        return False

async def reconnect(max_attempts=3, attempt=1):
    try:
        await client.disconnect()
        await client.connect()
        if not await client.is_user_authorized():
            logger.info(f"{datetime.now()}: Reauthorization required. Please restart the script.")
            return False
        logger.info(f"{datetime.now()}: Reconnected successfully (attempt {attempt}/{max_attempts}).")
        return True
    except Exception as e:
        if attempt < max_attempts:
            logger.info(f"{datetime.now()}: Reconnection attempt {attempt}/{max_attempts} failed: {str(e)}. Retrying...")
            await asyncio.sleep(random.uniform(5, 10))
            return await reconnect(max_attempts, attempt + 1)
        logger.info(f"{datetime.now()}: Max reconnection attempts reached. Stopping.")
        return False


@client.on(events.NewMessage)
async def handler(event):
    logger.debug(f"Received new message from chat {event.chat_id}: {event.message.text}")

    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        logger.debug("Fetching tracked chat list from database.")
        chat_list = await get_all_tracked_chats()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
        logger.debug(f"Tracked chat list: {chat_list}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '-100' –∫ chat_id, –µ—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª
        if event.chat_id not in chat_list:
            # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
            if event.chat_id not in chat_list and f"-100{event.chat_id}" in chat_list:
                logger.info(f"Message from chat {event.chat_id} is not in tracked chats, but adding '-100' prefix.")
                event.chat_id = f"-100{event.chat_id}"        
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ chat_id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
        if event.chat_id not in chat_list:
            logger.info(f"Message from chat {event.chat_id} is not in tracked chats. Skipping.")
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ

        logger.info(f"Message from chat {event.chat_id} is in tracked chats. Processing message...")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await process_message(event)

    except Exception as e:
        logger.error(f"Error in handler for chat {event.chat_id}: {str(e)}", exc_info=True)




async def process_message(event):
    message = event.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    if await is_message_processed(message.id):
        logger.info(f"{datetime.now()}: Reached processed message {message.id} in chat {message.chat_id}. Stopping. | –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ —á–∞—Ç–µ {message.chat_id}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—à–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    chat = await message.get_chat()
    sender = await message.get_sender()
                    
    # –ö—ç—à–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access_hash
    if sender and isinstance(sender, User):
        try:
            sender_entity = await client.get_entity(sender.id)
            logger.info(f"Cached entity for {sender.id} with access_hash: {sender_entity.access_hash}")
            logger.info(f"Full sender entity data: {vars(sender_entity)}")
        except ValueError as ve:
            logger.warning(f"Could not fully resolve sender {sender.id} entity: {str(ve)}")
            logger.info(f"Partial sender data: {vars(sender) if hasattr(sender, '__dict__') else str(sender)}")
        except Exception as e:
            logger.error(f"Unexpected error resolving sender {sender.id}: {str(e)}", exc_info=True)
            logger.info(f"Partial sender data: {vars(sender) if hasattr(sender, '__dict__') else str(sender)}")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —é–∑–µ—Ä–Ω–µ–π–º–∞
    if sender and isinstance(sender, User):
        first_name = sender.first_name
        username = sender.username
        sender_id = sender.id
    else:
        first_name = None
        username = None
        sender_id = sender.id if sender else None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    message_timestamp = message.date.timestamp()
    message_data = {
        "update_id": 0,
        "message_id": message.id,
        "chat_id": chat.id,
        "chat_type": chat.type if hasattr(chat, "type") else "unknown",
        "sender_id": sender_id,
        "first_name": first_name,
        "username": username,
        "date": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(message_timestamp)),
        "text": message.text if message.text else "",
        "original_message_id": message.id,
    }
    
    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not message.text or not message.text.strip():
        logger.info(f"{datetime.now()}: –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞—Ç–∞ {message.chat_id}")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ 
    
    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if not await check_keywords_match(message.text):
        logger.info(f"{datetime.now()}: –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} ‚Äî –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        await mark_message_as_processed(message.id)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
    await save_message(**message_data)
    logger.info(f"{datetime.now()}: Saved message {message.id} from chat {event.chat_id}")
                    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É–ø–µ—Ä –≥—Ä—É–ø–ø—É
    await send_to_supergroup_topic(message.id)
                    
    await mark_message_as_processed(message.id)
                    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
    # await process_and_send_webhook(message.id)
    
    
    # # –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    # if await check_keywords_match(message.text):
    #     logger.info(f"Processing message {message.id} from chat {event.chat_id}")
    #     await save_message(message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
    #     await send_to_supergroup_topic(message.id)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É



# async def parse_chat(chat_id, start_date=None):
#     try:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º start_date –∫–∞–∫ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
#         if not start_date:
#             start_date = datetime.now()  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞

#         messages_processed = 0
#         while True:
#             try:
#                 # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å start_date
#                 async for message in client.iter_messages(chat_id, offset_date=start_date, limit=100):
#                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
#                     if not await check_session():
#                         if not await reconnect():
#                             return  # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
#                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
#                     if await is_message_processed(message.id):
#                         logger.info(f"{datetime.now()}: Reached processed message {message.id} in chat {chat_id}. Stopping. | –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
#                         return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—à–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

#                     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
#                     chat = await message.get_chat()
#                     sender = await message.get_sender()
                    
#                     # –ö—ç—à–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access_hash
#                     if sender and isinstance(sender, User):
#                         try:
#                             sender_entity = await client.get_entity(sender.id)
#                             logger.info(f"Cached entity for {sender.id} with access_hash: {sender_entity.access_hash}")
#                             logger.info(f"Full sender entity data: {vars(sender_entity)}")
#                         except ValueError as ve:
#                             logger.warning(f"Could not fully resolve sender {sender.id} entity: {str(ve)}")
#                             logger.info(f"Partial sender data: {vars(sender) if hasattr(sender, '__dict__') else str(sender)}")
#                         except Exception as e:
#                             logger.error(f"Unexpected error resolving sender {sender.id}: {str(e)}", exc_info=True)
#                             logger.info(f"Partial sender data: {vars(sender) if hasattr(sender, '__dict__') else str(sender)}")

#                     # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —é–∑–µ—Ä–Ω–µ–π–º–∞
#                     if sender and isinstance(sender, User):
#                         first_name = sender.first_name
#                         username = sender.username
#                         sender_id = sender.id
#                     else:
#                         first_name = None
#                         username = None
#                         sender_id = sender.id if sender else None
                    
#                     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
#                     message_timestamp = message.date.timestamp()
#                     message_data = {
#                         "update_id": 0,
#                         "message_id": message.id,
#                         "chat_id": chat.id,
#                         "chat_type": chat.type if hasattr(chat, "type") else "unknown",
#                         "sender_id": sender_id,
#                         "first_name": first_name,
#                         "username": username,
#                         "date": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(message_timestamp)),
#                         "text": message.text if message.text else "",
#                     }
                    
#                     # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
#                     if not message.text or not message.text.strip():
#                         logger.info(f"{datetime.now()}: –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}")
#                         continue
                    
#                     # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
#                     if not await check_keywords_match(message.text):
#                         logger.info(f"{datetime.now()}: –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} ‚Äî –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
#                         await mark_message_as_processed(message.id)
#                         continue
                    
#                     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
#                     await save_message(**message_data)
#                     logger.info(f"{datetime.now()}: Saved message {message.id} from chat {chat_id}")
                    
#                     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É–ø–µ—Ä –≥—Ä—É–ø–ø—É
#                     await send_to_supergroup_topic(message.id)
                    
#                     await mark_message_as_processed(message.id)
                    
#                     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
#                     # await process_and_send_webhook(message.id)
                    
#                     messages_processed += 1  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#                     await asyncio.sleep(random.uniform(1, 5))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞

#                 # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –Ω–∞—à–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#                 # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º start_date –Ω–∞ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∏–Ω—É—Å 1 —Å–µ–∫—É–Ω–¥–∞
#                 if messages_processed > 0:
#                     last_message_date = datetime.strptime(message_data["date"], "%Y-%m-%d %H:%M:%S")
#                     start_date = last_message_date - timedelta(seconds=1)
#                     logger.info(f"{datetime.now()}: Processed {messages_processed} messages. Continuing with start_date={start_date}")
#                 else:
#                     logger.info(f"{datetime.now()}: No new messages found in chat {chat_id}. Stopping. | –í —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
#                     break  # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
#             except FloodWaitError as e:
#                 logger.info(f"{datetime.now()}: Flood wait detected for chat {chat_id}. Waiting for {e.seconds} seconds.")
#                 await asyncio.sleep(e.seconds)
#                 continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
#             except PhoneMigrateError as e:
#                 logger.info(f"{datetime.now()}: Phone migrated to DC {e.dc_id}. Reconnecting...")
#                 await client.session.set_dc(e.dc_id, API_ID, API_HASH)
#                 await reconnect()
#                 continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#     except ValueError as e:
#         logger.info(f"{datetime.now()}: Error parsing chat {chat_id}: {str(e)}. Skipping this chat.")
#     except Exception as e:
#         logger.info(f"{datetime.now()}: Unexpected error parsing chat {chat_id}: {str(e)}. Skipping this chat.")

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = ['client', 'start_client', 'stop_client', 'get_entity_or_fail']



# async def parse_loop():
#     while True:
#         chat_ids = await get_all_tracked_chats()
#         if not chat_ids:
#             logger.info("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥...")
#             await asyncio.sleep(60)
#             continue

#         for chat_id in chat_ids:
#             if not await check_session():
#                 if not await reconnect():
#                     logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.")
#                     return
#             try:
#                 logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ {chat_id}")
#                 await parse_chat(chat_id)
#                 await asyncio.sleep(random.uniform(3, 6))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
#             except Exception as e:
#                 logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞—Ç–∞ {chat_id}: {str(e)}")
#                 continue

#         logger.info("–¶–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º.")
#         await asyncio.sleep(60)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏


