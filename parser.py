from telethon import TelegramClient
from telethon.errors import FloodWaitError, SessionPasswordNeededError, PhoneMigrateError
from datetime import datetime, timedelta
import time
import os
import asyncio
import random
from dotenv import load_dotenv
from database import save_message, is_message_processed, get_last_parsed_date
from webhook_processor import process_and_send_webhook


load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
CHAT_IDS = [int(chat_id.strip()) for chat_id in os.getenv("CHAT_IDS", "").split(",")]
PHONE = os.getenv("PHONE")

client = TelegramClient(
    "Property",
    API_ID,
    API_HASH,
    device_model="Dell XPS 13",
    system_version="Windows 11",
    app_version="5.15.2 x64",
    lang_code="en",
    system_lang_code="en-US"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
async def start_client():
    print(f"{datetime.now()}: ‚úÖ We launch the Telethon client for the user bot. | –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telethon –¥–ª—è —é–∑–µ—Ä-–±–æ—Ç–∞.")
    try:
        await client.connect()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if not await client.is_user_authorized():
            await client.start(phone=PHONE)
        me = await client.get_me()
        print(f"Authenticated as: {me.id} ({me.phone})")
        print("‚úÖ Telethon client connected")
    except Exception as e:
        print(f"{datetime.now()}: Error starting client: {str(e)}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
async def stop_client():
    await client.disconnect()
    print(f"{datetime.now()}: üõë Telethon client disconnected")

async def send_test_message():
    me = await client.get_me()
    my_user_id = me.id
    await client.send_message(my_user_id, "Bot activated successfully! This is a test message. | –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    print(f"{datetime.now()}: Test message sent to yourself. | –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")

async def get_entity_or_fail(entity_id):
    try:
        return await client.get_entity(entity_id)  # –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø–æ ID
    except ValueError as e:
        raise Exception(f"Could not resolve entity {entity_id}: {str(e)}")

async def check_session():
    try:
        me = await client.get_me()
        if not me:
            raise Exception("Session is invalid, attempting to reconnect.")
        return True
    except Exception as e:
        print(f"{datetime.now()}: Session check failed: {str(e)}")
        return False

async def reconnect(max_attempts=3, attempt=1):
    try:
        await client.disconnect()
        await client.connect()
        if not await client.is_user_authorized():
            print(f"{datetime.now()}: Reauthorization required. Please restart the script.")
            return False
        print(f"{datetime.now()}: Reconnected successfully (attempt {attempt}/{max_attempts}).")
        return True
    except Exception as e:
        if attempt < max_attempts:
            print(f"{datetime.now()}: Reconnection attempt {attempt}/{max_attempts} failed: {str(e)}. Retrying...")
            await asyncio.sleep(random.uniform(5, 10))
            return await reconnect(max_attempts, attempt + 1)
        print(f"{datetime.now()}: Max reconnection attempts reached. Stopping.")
        return False


async def parse_chat(chat_id, start_date=None):
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º start_date –∫–∞–∫ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if not start_date:
            start_date = datetime.now()  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞

        messages_processed = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—É–∂–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç)
        while True:  # –¶–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å start_date
                async for message in client.iter_messages(chat_id, offset_date=start_date, limit=50):  # –õ–∏–º–∏—Ç 50 –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è
                    if not await check_session():
                        if not await reconnect():
                            return  # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                    if await is_message_processed(message.id):
                        print(f"{datetime.now()}: Reached processed message {message.id} in chat {chat_id}. Stopping.")
                        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—à–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    chat = await message.get_chat()
                    sender = await message.get_sender()

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    message_timestamp = message.date.timestamp()
                    message_data = {
                        "update_id": 0,
                        "message_id": message.id,
                        "chat_id": chat.id,
                        "chat_type": chat.type if hasattr(chat, "type") else "unknown",
                        "sender_id": sender.id if sender else None,
                        "first_name": sender.first_name if sender else None,
                        "username": sender.username if sender else None,
                        "date": time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(message_timestamp)),
                        "text": message.text if message.text else "",
                    }

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
                    await save_message(**message_data)
                    print(f"{datetime.now()}: Saved message {message.id} from chat {chat_id}")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
                    await process_and_send_webhook(message.id)
                    
                    messages_processed += 1  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await asyncio.sleep(random.uniform(1, 3))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞

                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –Ω–∞—à–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º start_date –Ω–∞ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∏–Ω—É—Å 1 —Å–µ–∫—É–Ω–¥–∞
                if messages_processed > 0:
                    last_message_date = datetime.strptime(message_data["date"], "%Y-%m-%d %H:%M:%S")
                    start_date = last_message_date - timedelta(seconds=1)
                    print(f"{datetime.now()}: Processed {messages_processed} messages. Continuing with start_date={start_date}")
                else:
                    print(f"{datetime.now()}: No new messages found in chat {chat_id}. Stopping. | –í —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                    break  # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
            except FloodWaitError as e:
                print(f"{datetime.now()}: Flood wait detected for chat {chat_id}. Waiting for {e.seconds} seconds.")
                await asyncio.sleep(e.seconds)
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            except PhoneMigrateError as e:
                print(f"{datetime.now()}: Phone migrated to DC {e.dc_id}. Reconnecting...")
                await client.session.set_dc(e.dc_id, API_ID, API_HASH)
                await reconnect()
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    except ValueError as e:
        print(f"{datetime.now()}: Error parsing chat {chat_id}: {str(e)}. Skipping this chat.")
    except Exception as e:
        print(f"{datetime.now()}: Unexpected error parsing chat {chat_id}: {str(e)}. Skipping this chat.")

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = ['client', 'start_client', 'stop_client', 'get_entity_or_fail']

async def main():
    try:
        await start_client()
        
        await send_test_message()

        for chat_id in CHAT_IDS:
            if not await check_session():
                if not await reconnect():
                    return
            print(f"{datetime.now()}: Parsing chat {chat_id}")
            await parse_chat(chat_id)
            await asyncio.sleep(random.uniform(5, 15))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
    except Exception as e:
        print(f"{datetime.now()}: Error in main: {str(e)}")
    finally:
        await stop_client()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

