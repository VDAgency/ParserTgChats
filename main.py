import asyncio
import logging
import os
import sys
from bot_instance import bot
from aiogram import Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from telethon.tl.types import PeerChannel, PeerChat
from telethon.errors import ChannelInvalidError, ChannelPrivateError, ChannelPublicGroupNaError

from parser import client
from dotenv import load_dotenv
from states import ChatStates
from parser import get_entity_or_fail, start_client, stop_client, parse_loop, send_test_message
from database import init_db, add_user_chat, delete_user_chat, is_user_chat_exists, get_user_chats


# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
ADMINS = list(map(int, os.getenv("ADMINS", "").split(",")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëë\n–¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        await admin_logic_start(message)
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! ü§ñ\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º–∞—Ç–∏–∫–∏.\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            "–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @CryptoSamara")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async def admin_logic_start(message: Message):
    first_name = message.from_user.first_name

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="remove_chat")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ —á–∞—Ç—ã", callback_data="list_chats")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>!\n"
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–≤–æ–¥–∏—Ç—Å—è –∫:\n\n"
        "‚Ä¢ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∏ —É–¥–∞–ª–µ–Ω–∏—é —á–∞—Ç–∞,\n"
        "–∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )

    await message.answer(text, reply_markup=keyboard)


@dp.callback_query(F.data == "add_chat")
async def handle_add_chat(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ username (@–∏–º—è—á–∞—Ç–∞) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-—á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")
    await state.set_state(ChatStates.waiting_for_chat_input)

@dp.message(ChatStates.waiting_for_chat_input)
async def process_chat_input(message: Message, state: FSMContext):
    raw_input = message.text.strip()
    user_id = message.from_user.id

    # –ü–∞—Ä—Å–∏–º username
    if "t.me/" in raw_input:
        username = raw_input.split("t.me/")[-1].replace("/", "").strip()
    elif raw_input.startswith("@"):
        username = raw_input[1:]
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (@–∏–º—è) –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º chat_id —á–µ—Ä–µ–∑ Telethon userbot
    try:
        entity = await get_entity_or_fail(username)
        chat_id = entity.id
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ –∏–º–µ–Ω–∏ @{username}.\n–û—à–∏–±–∫–∞: {str(e)}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    await add_user_chat(user_id=user_id, chat_id=chat_id)

    await message.answer(f"‚úÖ –ß–∞—Ç <b>@{username}</b> –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")
    await state.clear()


@dp.callback_query(F.data == "remove_chat")
async def handle_remove_chat(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ username (@–∏–º—è—á–∞—Ç–∞) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-—á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
    await state.set_state(ChatStates.waiting_for_chat_delete)

@dp.message(ChatStates.waiting_for_chat_delete)
async def process_chat_delete(message: Message, state: FSMContext):
    raw_input = message.text.strip()
    user_id = message.from_user.id

    if "t.me/" in raw_input:
        username = raw_input.split("t.me/")[-1].replace("/", "").strip()
    elif raw_input.startswith("@"):
        username = raw_input[1:]
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (@–∏–º—è) –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        return

    try:
        entity = await get_entity_or_fail(username)
        chat_id = entity.id
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ –∏–º–µ–Ω–∏ @{username}.\n–û—à–∏–±–∫–∞: {str(e)}")
        return

    exists = await is_user_chat_exists(user_id, chat_id)
    if not exists:
        await message.answer(f"‚ÑπÔ∏è –ß–∞—Ç @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
        await state.clear()
        return

    await delete_user_chat(user_id, chat_id)
    await message.answer(f"‚úÖ –ß–∞—Ç @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
    await state.clear()


@dp.callback_query(F.data == "list_chats")
async def list_user_chats(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chats = await get_user_chats(user_id)

    if not chats:
        await callback.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return

    text = "<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:</b>\n\n"

    for i, chat_id in enumerate(chats, start=1):
        try:
            entity = await client.get_entity(PeerChannel(chat_id))
            title = getattr(entity, "title", None)
            username = getattr(entity, "username", None)
            link = f"https://t.me/{username}" if username else ""
        except (ChannelInvalidError, ChannelPrivateError, ChannelPublicGroupNaError):
            title = "‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            link = ""
        except Exception as e:
            title = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
            link = ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        if link:
            text += f"{i}. <b>{title}</b> ‚Äî <a href='{link}'>—Å—Å—ã–ª–∫–∞</a>\n"
        else:
            text += f"{i}. <b>{title}</b> (ID: <code>{chat_id}</code>)\n"

    await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await start_client()
    await send_test_message()
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    polling_task = asyncio.create_task(dp.start_polling(bot))
    parsing_task = asyncio.create_task(parse_loop())

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è polling_task (–ø–æ–∫–∞ –±–æ—Ç –∂–∏–≤)
    await polling_task

    # –ö–æ–≥–¥–∞ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç–∞
    parsing_task.cancel()
    await stop_client()

async def app_start():
    await init_db()
    await main()

if __name__ == "__main__":
    import asyncio
    asyncio.run(app_start())
