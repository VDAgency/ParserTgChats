import time
time.sleep(15)

import asyncio
import logging
import os
import sys
import uvicorn
from bot_instance import bot
from aiogram import Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from telethon.tl.types import PeerChannel, PeerChat
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors import UserAlreadyParticipantError, FloodWaitError
from telethon.errors import ChannelInvalidError, ChannelPrivateError, ChannelPublicGroupNaError
from pymorphy3 import MorphAnalyzer

from receiver import app
from client_instance import client
from dotenv import load_dotenv
from states import ChatStates, KeywordStates, KeywordLemmaState
from parser import get_entity_or_fail, start_client, stop_client, send_test_message
from database import init_db, add_user_chat, delete_user_chat, is_user_chat_exists, get_user_chats, get_all_tracked_chats
from database import add_keywords, delete_keyword, get_user_keywords_by_type, get_all_keywords_by_type
from database import add_intent_keywords_to_db
from receiver import check_health


# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
ADMINS = list(map(int, os.getenv("ADMINS", "").split(",")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä MorphAnalyzer –¥–ª—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏
morph = MorphAnalyzer()

def lemmatize_word(word):
    # –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pymorphy2
    return morph.parse(word)[0].normal_form




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    if user_id in ADMINS:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëë\n–¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        await admin_logic_start(message, first_name)
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! ü§ñ\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º–∞—Ç–∏–∫–∏.\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @CryptoSamara")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


async def admin_logic_start(message: Message, first_name: str):

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–∞–º–∏", callback_data="working_chats")],
        [InlineKeyboardButton(text="üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="working_keywords")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>!\n"
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞-–ø–∞—Ä—Å–µ—Ä–∞ —Å–ª–µ–¥—É—é—â–∏–π:\n\n"
        "1. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —á–∞—Ç—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã.\n\n"
        "2. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–∞—Ä—Å–µ—Ä —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏."
    )

    await message.answer(text, reply_markup=keyboard)


@dp.callback_query(F.data == "back_admin_logic_start")
async def back_admin_logic_start(callback_query: CallbackQuery):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.delete()
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    first_name = callback_query.from_user.first_name
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await admin_logic_start(callback_query.message, first_name)



@dp.callback_query(F.data == "working_chats")
async def working_chats(callback_query: CallbackQuery, state: FSMContext):
    first_name = callback_query.from_user.first_name

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="remove_chat")
        ],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ —á–∞—Ç—ã", callback_data="list_chats")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã", callback_data="list_all_chats")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–µ–∑–∞–¥", callback_data="back_admin_logic_start")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"–ò—Ç–∞–∫, <b>{first_name}</b>!\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å —á–∞—Ç–∞–º–∏ —Å–ª–µ–¥—É—é—â–∏–π:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–æ–±–∞–≤–∏–ª –ª–∏—á–Ω–æ\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–±–æ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞-–ø–∞—Ä—Å–µ—Ä–∞."
    )

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard)


@dp.callback_query(F.data == "working_keywords")
async def working_keywords(callback_query: CallbackQuery, state: FSMContext):
    first_name = callback_query.from_user.first_name

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥", callback_data="working_keywords_classic"),
            InlineKeyboardButton(text="–£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥", callback_data="working_keywords_lemma")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–µ–∑–∞–¥", callback_data="back_admin_logic_start")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
    text = (
        f"<b>{first_name}</b>!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑. –ê –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è —É–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥.\n\n"
        "üîç <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥</b> ‚Äî –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
        "üí° <b>–£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥</b> ‚Äî –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—é –∏ –æ—Ç–±–æ—Ä –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.\n"
    )

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
@dp.callback_query(F.data == "working_keywords_classic")
async def working_keywords(callback_query: CallbackQuery, state: FSMContext):
    first_name = callback_query.from_user.first_name

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ûï –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ", callback_data="add_keywords"),
            InlineKeyboardButton(text="‚ùå‚ûï –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ", callback_data="add_negative_keywords")
        ],
        [
            InlineKeyboardButton(text="‚úÖüìã –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö", callback_data="list_keywords"),
            InlineKeyboardButton(text="‚ùåüìã –°–ø–∏—Å–æ–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö", callback_data="list_negative_keywords")
        ],
        [
            InlineKeyboardButton(text="‚úÖüìã –í—Å–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ (–≤—Å–µ—Ö)", callback_data="list_all_keywords"),
            InlineKeyboardButton(text="‚ùåüìã –í—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ (–≤—Å–µ—Ö)", callback_data="list_all_negative_keywords")
        ],
        [
            InlineKeyboardButton(text="‚úÖ‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ", callback_data="remove_keywords"),
            InlineKeyboardButton(text="‚ùå‚ûñ –£–¥–∞–ª–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ", callback_data="remove_negative_keywords")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data= "working_keywords")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"<b>{first_name}</b>!\n"
        "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n"
        "‚úÖ <b>–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ</b> ‚Äî –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "‚ùå <b>–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ</b> ‚Äî –ø—Ä–∏ –∏—Ö –Ω–∞–ª–∏—á–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ –±–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑, "
        "—Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –∞–±–∑–∞—Ü–µ–º, –Ω–∞—á–∞–≤ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É "
        "–∏–ª–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤.\n"
    )

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –£–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ—Ö–æ–∂–∏–º–∏ —Å–ª–æ–≤–∞–º–∏)
@dp.callback_query(F.data == "working_keywords_lemma")
async def working_keywords_lemma(callback_query: CallbackQuery, state: FSMContext):
    first_name = callback_query.from_user.first_name

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ‚ûï –ù–∞–º–µ—Ä–µ–Ω–∏–µ", callback_data="add_intent"),
            InlineKeyboardButton(text="‚ùå‚ûñ –ù–∞–º–µ—Ä–µ–Ω–∏–µ", callback_data="remove_intent")
        ],
        [
            InlineKeyboardButton(text="‚úÖ‚ûï –û–±—ä–µ–∫—Ç", callback_data="add_object"),
            InlineKeyboardButton(text="‚ùå‚ûñ –û–±—ä–µ–∫—Ç", callback_data="remove_object")
        ],
        [
            InlineKeyboardButton(text="‚úÖ‚ûï –†–∞–π–æ–Ω", callback_data="add_region"),
            InlineKeyboardButton(text="‚ùå‚ûñ –†–∞–π–æ–Ω", callback_data="remove_region")
        ],
        [
            InlineKeyboardButton(text="‚úÖ‚ûï –ü–ª—è–∂", callback_data="add_beach"),
            InlineKeyboardButton(text="‚ùå‚ûñ –ü–ª—è–∂", callback_data="remove_beach")
        ],
        [
            InlineKeyboardButton(text="‚úÖ‚ûï –°–ø–∞–ª—å–Ω–∏", callback_data="add_bedrooms"),
            InlineKeyboardButton(text="‚ùå‚ûñ –°–ø–∞–ª—å–Ω–∏", callback_data="remove_bedrooms")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data= "working_keywords")]
    ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    text = (
        f"<b>{first_name}</b>!\n\n"
        "–¢—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ó–¥–µ—Å—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤.\n\n"
        "–£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –∏—â–µ—à—å, —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏—Ö —Å–∏–Ω–æ–Ω–∏–º—ã.\n\n"
        "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "üîë **–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**\n"
        "‚Ä¢ –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "  - **–ù–∞–º–µ—Ä–µ–Ω–∏–µ**: –ø–æ–∫—É–ø–∫–∞, –∞—Ä–µ–Ω–¥–∞, —Å—ä—ë–º, –ø–æ–∫—É–ø–∞—é –∏ —Ç.–¥.\n"
        "  - **–û–±—ä–µ–∫—Ç**: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º, –∫–æ–Ω–¥–æ–º–∏–Ω–∏—É–º –∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        "‚úîÔ∏è –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ **–ù–∞–º–µ—Ä–µ–Ω–∏—è** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∞—Ä–µ–Ω–¥—É—é') –∏ –∏–∑ **–û–±—ä–µ–∫—Ç–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–≤–∞—Ä—Ç–∏—Ä–∞'), –æ–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "–≠—Ç–∏ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç —Ç–æ—á–Ω–æ –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.\n\n"
        "üîç **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä:**\n"
        "‚Ä¢ –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä,:\n"
        "  - **–†–∞–π–æ–Ω—ã**: –ü–∞—Ç—Ç–∞–π—è, –ü—Ö—É–∫–µ—Ç –∏ —Ç.–¥.\n"
        "  - **–ü–ª—è–∂–∏**: –ü–∞—Ç–æ–Ω–≥, –ö–∞—Ç–∞ –∏ –¥—Ä—É–≥–∏–µ –ø–ª—è–∂–∏ –¢–∞–π–ª–∞–Ω–¥–∞.\n"
        "  - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω**: 1 —Å–ø–∞–ª—å–Ω—è, 2 —Å–ø–∞–ª—å–Ω–∏ –∏ —Ç.–¥.\n"
        "‚Ä¢ –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é.\n\n"
        "‚ùó **–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:**\n"
        "‚Ä¢ –¢—ã –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–æ—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∏–ª–∏ —Ñ—Ä–∞–∑–µ –∑–∞ —Ä–∞–∑.\n\n"
        "–≠—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–∞–º!"
    )

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard)



@dp.callback_query(F.data == "add_chat")
async def handle_add_chat(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ username (@–∏–º—è—á–∞—Ç–∞) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-—á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")
    await state.set_state(ChatStates.waiting_for_chat_input)

@dp.message(ChatStates.waiting_for_chat_input)
async def process_chat_input(message: Message, state: FSMContext):
    raw_input = message.text.strip()
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_chat")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_chats")]
    ])
    
    # –ü–∞—Ä—Å–∏–º username
    if "t.me/" in raw_input:
        username = raw_input.split("t.me/")[-1].replace("/", "").strip()
    elif raw_input.startswith("@"):
        username = raw_input[1:]
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (@–∏–º—è) –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º chat_id —á–µ—Ä–µ–∑ Telethon userbot
    try:
        entity = await get_entity_or_fail(username)
        chat_id = entity.id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è @{username}: {e}")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ –∏–º–µ–Ω–∏ @{username}.\n–û—à–∏–±–∫–∞: {str(e)}")
        return

    # üëâ –ü—Ä–æ–±—É–µ–º –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ –±–∞–∑—É
    joined = await join_channel_if_needed(username)
    if not joined:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ @{username}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    await add_user_chat(user_id=user_id, chat_id=chat_id)

    await message.answer(f"‚úÖ –ß–∞—Ç <b>@{username}</b> –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.", reply_markup=keyboard)
    await state.clear()


async def join_channel_if_needed(username: str) -> bool:
    """
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç —é–∑–µ—Ä-–±–æ—Ç–∞ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –Ω—ë–º.
    :param username: –ò–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏–ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        await client(JoinChannelRequest(username))
        logging.info(f"‚úÖ –Æ–∑–µ—Ä–±–æ—Ç –≤—Å—Ç—É–ø–∏–ª –≤ @{username}")
        return True

    except UserAlreadyParticipantError:
        logging.info(f"‚ÑπÔ∏è –Æ–∑–µ—Ä–±–æ—Ç —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ @{username}")
        return True

    except FloodWaitError as e:
        logging.warning(f"‚è≥ FloodWaitError: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ @{username}")
        await asyncio.sleep(e.seconds + 1)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π +1 —Å–µ–∫—É–Ω–¥–∞
        try:
            await client(JoinChannelRequest(username))
            logging.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞. –Æ–∑–µ—Ä–±–æ—Ç –≤—Å—Ç—É–ø–∏–ª –≤ @{username}")
            return True
        except Exception as retry_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ @{username}: {retry_error}")
            return False

    except Exception as e:
        logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ @{username}: {e}")
        return False



@dp.callback_query(F.data == "remove_chat")
async def handle_remove_chat(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ username (@–∏–º—è—á–∞—Ç–∞) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-—á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
    await state.set_state(ChatStates.waiting_for_chat_delete)

@dp.message(ChatStates.waiting_for_chat_delete)
async def process_chat_delete(message: Message, state: FSMContext):
    raw_input = message.text.strip()
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="remove_chat")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_chats")]
    ])
    
    if "t.me/" in raw_input:
        username = raw_input.split("t.me/")[-1].replace("/", "").strip()
    elif raw_input.startswith("@"):
        username = raw_input[1:]
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (@–∏–º—è) –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
        return

    try:
        entity = await get_entity_or_fail(username)
        chat_id = entity.id
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ –∏–º–µ–Ω–∏ @{username}.\n–û—à–∏–±–∫–∞: {str(e)}")
        return

    exists = await is_user_chat_exists(user_id, chat_id)
    if not exists:
        await message.answer(f"‚ÑπÔ∏è –ß–∞—Ç @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
        await state.clear()
        return

    await delete_user_chat(user_id, chat_id)
    await message.answer(f"‚úÖ –ß–∞—Ç @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
    await state.clear()


@dp.callback_query(F.data == "list_chats")
async def list_user_chats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chats = await get_user_chats(user_id)

    if not chats:
        await callback_query.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="working_chats")]
    ])
    
    text = "<b>üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:</b>\n\n"

    for i, chat_id in enumerate(chats, start=1):
        try:
            entity = await client.get_entity(PeerChannel(chat_id))
            title = getattr(entity, "title", None)
            username = getattr(entity, "username", None)
            link = f"https://t.me/{username}" if username else ""
        except (ChannelInvalidError, ChannelPrivateError, ChannelPublicGroupNaError):
            title = "‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            link = ""
        except Exception as e:
            title = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
            link = ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        if link:
            text += f"{i}. <b>{title}</b> ‚Äî <a href='{link}'>—Å—Å—ã–ª–∫–∞</a>\n"
        else:
            text += f"{i}. <b>{title}</b> (ID: <code>{chat_id}</code>)\n"

    await callback_query.message.delete()
    await callback_query.message.answer(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)


@dp.callback_query(F.data == "list_all_chats")
async def list_all_chats(callback_query: types.CallbackQuery):
    chats = await get_all_tracked_chats()

    if not chats:
        await callback_query.message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return

        # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="working_chats")]
    ])
    
    text = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:</b>\n\n"
    for i, chat_id in enumerate(chats, start=1):
        try:
            entity = await client.get_entity(PeerChannel(chat_id))
            title = getattr(entity, "title", None)
            username = getattr(entity, "username", None)
            link = f"https://t.me/{username}" if username else ""
        except (ChannelInvalidError, ChannelPrivateError, ChannelPublicGroupNaError):
            title = "‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            link = ""
        except Exception as e:
            title = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
            link = ""

        if link:
            text += f"{i}. <b>{title}</b> ‚Äî <a href='{link}'>—Å—Å—ã–ª–∫–∞</a>\n"
        else:
            text += f"{i}. <b>{title}</b> (ID: <code>{chat_id}</code>)\n"

    await callback_query.message.delete()
    await callback_query.message.answer(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)



@dp.callback_query(F.data == "add_keywords")
async def handle_add_keywords(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "‚úèÔ∏è –ü—Ä–∏—à–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å.\n\n"
        "–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ:\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Üí `–æ–∫–Ω–∞, –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –æ–∫–Ω–∞`\n"
        "‚Ä¢ –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n`–¥–æ—Å—Ç–∞–≤–∫–∞\n–º–æ–Ω—Ç–∞–∂`\n\n"
        "–í—Å–µ –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
        parse_mode="Markdown"
    )
    await state.set_state(KeywordStates.waiting_for_keywords_input)


@dp.message(KeywordStates.waiting_for_keywords_input)
async def process_keywords_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    raw_input = message.text.strip()

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_keywords")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords_classic")]
    ])
    
    if not raw_input:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        return

    added = await add_keywords(user_id, raw_input, is_negative=False)

    if not added:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏.")
    else:
        formatted = "\n".join(f"‚Ä¢ <code>{kw}</code>" for kw in added)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n{formatted}", reply_markup=keyboard, parse_mode="HTML")

    await state.clear()


@dp.callback_query(F.data == "remove_keywords")
async def handle_remove_keywords(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "‚úÇÔ∏è –ü—Ä–∏—à–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
        "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∏–ª–∏ —Ñ—Ä–∞–∑–µ –∑–∞ —Ä–∞–∑."
    )
    await state.set_state(KeywordStates.waiting_for_keyword_deletion)


@dp.message(KeywordStates.waiting_for_keyword_deletion)
async def process_keyword_deletion(message: Message, state: FSMContext):
    user_id = message.from_user.id
    keyword = message.text.strip()

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="remove_keywords")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords_classic")]
    ])
    
    if not keyword:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")
        return

    removed = await delete_keyword(user_id, keyword)

    if removed:
        await message.answer(f"üóëÔ∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <code>{keyword}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <code>{keyword}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.", parse_mode="HTML")

    await state.clear()


@dp.callback_query(F.data == "list_keywords")
async def handle_list_keywords(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    keywords = await get_user_keywords_by_type(user_id, keyword_type="positive")

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords")]
    ])
    
    if not keywords:
        await callback_query.message.answer("üîç –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö</b> –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        return

    text = "üîë –¢–≤–æ–∏ <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n"
    for i, kw in enumerate(keywords, start=1):
        text += f"{i}. <code>{kw}</code>\n"

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@dp.callback_query(F.data == "list_all_keywords")
async def handle_list_all_keywords(callback_query: CallbackQuery):
    keywords = await get_all_keywords_by_type("positive")

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords")]
    ])
    
    if not keywords:
        await callback_query.message.answer("üîç –ü–æ–∫–∞ –Ω–∏ –æ–¥–∏–Ω –∞–¥–º–∏–Ω –Ω–µ –¥–æ–±–∞–≤–∏–ª <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return

    text = "üîë –í—Å–µ <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤):\n\n"
    for i, kw in enumerate(keywords, start=1):
        text += f"{i}. <code>{kw}</code>\n"

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")



@dp.callback_query(F.data == "add_negative_keywords")
async def ask_negative_keywords(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã.\n\n"
        "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ:\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Üí <code>—Å–¥–∞—ë—Ç—Å—è, –ø—Ä–æ–¥–∞—ë—Ç—Å—è</code>\n"
        "‚Ä¢ –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n<code>–≤ –Ω–∞–ª–∏—á–∏–∏\n–≤ –∞—Ä–µ–Ω–¥—É</code>",
        parse_mode="HTML"
    )
    await state.set_state(KeywordStates.waiting_for_negative_keywords)


@dp.message(KeywordStates.waiting_for_negative_keywords)
async def save_negative_keywords(message: Message, state: FSMContext):
    user_id = message.from_user.id
    raw_input = message.text.strip()

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_negative_keywords")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords_classic")]
    ])
    
    if not raw_input:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        return

    added = await add_keywords(user_id, raw_input, is_negative=True)

    if not added:
        await message.answer("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        formatted = "\n".join(f"‚Ä¢ <code>{kw}</code>" for kw in added)
        await message.answer(f"üö´ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n{formatted}", reply_markup=keyboard, parse_mode="HTML")

    await state.clear()


@dp.callback_query(F.data == "remove_negative_keywords")
async def handle_remove_negative_keywords(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "‚úÇÔ∏è –ü—Ä–∏—à–ª–∏ <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ</b> –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
        "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∏–ª–∏ —Ñ—Ä–∞–∑–µ –∑–∞ —Ä–∞–∑."
    )
    await state.set_state(KeywordStates.waiting_for_negative_keyword_deletion)


@dp.message(KeywordStates.waiting_for_negative_keyword_deletion)
async def process_keyword_negative_deletion(message: Message, state: FSMContext):
    user_id = message.from_user.id
    keyword = message.text.strip()

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå‚ûñ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="remove_negative_keywords")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords_classic")]
    ])
    
    if not keyword:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ</b> –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")
        return

    removed = await delete_keyword(user_id, keyword)

    if removed:
        await message.answer(f"üóëÔ∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <code>{keyword}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <code>{keyword}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.", parse_mode="HTML")

    await state.clear()


@dp.callback_query(F.data == "list_negative_keywords")
async def handle_list_negative_keywords(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    keywords = await get_user_keywords_by_type(user_id, keyword_type="negative")

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords_classic")]
    ])
    
    if not keywords:
        await callback_query.message.answer("üîç –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö</b> –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        return

    text = "üîë –¢–≤–æ–∏ <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n"
    for i, kw in enumerate(keywords, start=1):
        text += f"{i}. <code>{kw}</code>\n"

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@dp.callback_query(F.data == "list_all_negative_keywords")
async def handle_list_all_negative_keywords(callback_query: CallbackQuery):
    keywords = await get_all_keywords_by_type("negative")

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="working_keywords_classic")]
    ])
    
    if not keywords:
        await callback_query.message.answer("üîç –ü–æ–∫–∞ –Ω–∏ –æ–¥–∏–Ω –∞–¥–º–∏–Ω –Ω–µ –¥–æ–±–∞–≤–∏–ª <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return

    text = "üîë –í—Å–µ <b>–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ</b> –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤):\n\n"
    for i, kw in enumerate(keywords, start=1):
        text += f"{i}. <code>{kw}</code>\n"

    await callback_query.message.delete()
    await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")



# === –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã "—É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞" –≤ –±–æ—Ç–µ –ø–∞—Ä—Å–µ—Ä–µ ===

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ù–∞–º–µ—Ä–µ–Ω–∏–µ"
@dp.callback_query(F.data == "add_intent")
async def add_intent(callback: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    await state.set_state(KeywordLemmaState.keywords_lemma_intent)

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    await callback.message.answer(
        "‚úèÔ∏è –ü—Ä–∏—à–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ù–∞–º–µ—Ä–µ–Ω–∏–µ'.\n\n"
        "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ:\n"
        "‚Ä¢ –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Üí `–∫—É–ø–ª—é, –∞—Ä–µ–Ω–¥—É—é, –∏—â—É`\n"
        "‚Ä¢ –ò–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n`—Å–Ω–∏–º—É\n–∞—Ä–µ–Ω–¥—É`"
    )

@dp.message(KeywordLemmaState.keywords_lemma_intent)
async def process_intent_keywords(message: Message, state: FSMContext):
    user_id = message.from_user.id
    raw_input = message.text.strip()

    if not raw_input:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    keywords = [kw.strip() for kw in raw_input.replace("\n", ",").split(",")]

    # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
    added_keywords = await add_intent_keywords_to_db(user_id, keywords)

    if added_keywords:
        formatted = "\n".join(f"‚Ä¢ <code>{kw}</code>" for kw in added_keywords)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ù–∞–º–µ—Ä–µ–Ω–∏–µ':\n\n{formatted}")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()









# === –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞ ===

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastAPI
async def run_fastapi():
    config = uvicorn.Config(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)), log_level="info")
    server = uvicorn.Server(config)
    await server.serve()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    
    await start_client()
    await send_test_message()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    polling_task = asyncio.create_task(dp.start_polling(bot))
    # parsing_task = asyncio.create_task(parse_loop())

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    fastapi_task = asyncio.create_task(run_fastapi())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    # health_task = asyncio.create_task(check_health())
    
    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è polling_task (–ø–æ–∫–∞ –±–æ—Ç –∂–∏–≤)
        await polling_task
    except asyncio.CancelledError:
        # –ö–æ–≥–¥–∞ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä, —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç–∞
        # parsing_task.cancel()
        fastapi_task.cancel()
        # health_task.cancel()
        await stop_client()
        raise

async def app_start():
    await init_db()
    await main()

if __name__ == "__main__":
    import asyncio
    asyncio.run(app_start())
